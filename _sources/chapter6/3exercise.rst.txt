chapter6练习
===========================================

- 本节难度： **大魔王！！** 


本章任务
------------------------------------------
- 运行 ``ch6b_usertest``
- merge ch4 的修改, ``git merge ch4`` 并处理冲突。
- 检查 ``ch6_4usertest``，``ch6b_usertest``, 确保 ch4 ch6 的功能依然正确。
- 结合代码、指导书已经课堂所学，理解文件系统的几个概念：全局文件表 / 进程文件描述符等
- 完成本章编程作业。
- 最终，完成实验报告并 push 你的 ch6 分支到远程仓库。

编程作业
-------------------------------------------

进程通信：共享内存
+++++++++++++++++++++++++++++++++++++++++++

进程间通信(IPC)对于某些系统和应用其实十分重要，它被称为微内核的 Achilles tendon，同时在 android 应用中也十分常见，为此 android 系统专门设计了一套 binder 机制来加速 IPC 的效率。

最基础的 IPC 方式大致分两类：

- 内核拷贝：指通过内核完成数据的拷贝，比如 pipe。
- 共享内存：直接将同一段物理内存映射到不同进程的虚存空间。

其中内核拷贝的方式一般效率较低，但安全可靠，容易同步。而共享内存的方式不需要内核参与，速度较快，但需要用户态自己想办法同步，同时可能会导致某些攻击，感兴趣的同学可以参考 `TOCTTOU <https://en.wikipedia.org/wiki/TOCTTOU>`_ 。

框架实现的 pipe 属于第一类，那么现在我们来实现第二类。实现 share memory 的方法不止一种，这里我们拓展 ch4 实现的 mmap 的功能，利用 mmap 来实现共享内存。

mmap 系统调用新定义：

- syscall ID: 222
- 接口：``int mmap(void* start, unsigned long long len, int port, int flag, int shmem_id)``
- 功能：当 flag 等于 0 时，功能与 ch4 时一致；当 flag = 1 时，视为申请共享内存（可类比 posix 接口的 MAP_SHARED 标志），这时需要根据 shmem_id 将对应的物理内存映射到 start 开始的虚存，内存页的属性为 prot。若此时 shmem_id 为 -1 时，视为需要申请一段新的物理内存作为共享内存使用; 若 shmem_id != -1，视作申请对应 id 的共享内存。
- 参数：
    - start：需要映射的虚存起始地址。
    - len：映射字节长度，可以为 0 （如果是则直接返回），不可过大 (上限 1GiB )。
    - port：第 0 位表示是否可读，第 1 位表示是否可写，第 2 位表示是否可执行。其他位无效（必须为 0 ）。
    - flag：申请内存的模式，为 0 时为申请物理内存，为 1 时为申请共享内存，其他值视作错误。
    - shmem_id：申请共享内存时使用，表示内核记录的一段共享内存的 id，该 id 全内核唯一（注意和 fd 的区别，fd 是 process 的属性, shmem_id 是全内核的属性）。
- 返回值: 
    - 若发生错误，返回 -1。
    - 若 flag == 0，返回值同 ch4。
    - 若 flag == 1，总返回映射的 shmem_id。
- 说明：
    - 我们尚未有完整文件系统，所以这只是一个看上去像 posix 的 mmap 但实际不是的系统调用。
    - 我们不定义共享内存与 fork 的相互作用，不会加以测试，任何实现都可以。
    - 为了简单，addr 要求按页对齐(否则报错)，len 可直接按页上取整。
    - 为了简单，不考虑发生错误时的页回收（也就是内存泄漏）。
- 错误：
    - [addr, addr + len) 存在已经被映射的页。
    - 物理内存不足。
    - port & !0x7 != 0 (port 其余位必须为0)。
    - port & 0x7 = 0 (这样的内存无意义)。
    - flag & ~0x1 != 0 (flag 应为 0 或 1)
    - shmem_id 无效。

munmap 系统调用定义：

- syscall ID：215
- C接口： ``int munmap(void* start, unsigned long long len)``
- Rust接口： ``fn munmap(start: usize, len: usize) -> i32``
- 功能：取消一块虚存的映射。
- 参数：同 mmap
- 说明：
    - 为了简单，参数错误时不考虑内存的恢复和回收。
- 错误：
    - [start, start + len) 中存在未被映射的虚存。

正确实现后，你的 os 应该能够正确运行 ch6_* 对应的一些测试用例，在 shell 中执行 ch6_usertest 来执行测试。

tips:

- 自求多福吧。。。


问答作业
-------------------------------------------

1. 举出使用 pipe 的一个实际应用的例子。

tips:
- 想想你平时咋使用 linux terminal 的？
- 如何使用 cat 和 wc 完成一个文件的行数统计？


报告要求
---------------------------------------

- pdf 格式，CI 网站提交，注明姓名学号。
- 完成 ch5 ch6 问答作业。
- [可选，不占分]你对本次实验设计及难度的看法。